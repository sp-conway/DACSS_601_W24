{
  "hash": "9459fcf44270771d9776b4251db38f58",
  "result": {
    "markdown": "---\ntitle: \"Univariate / bivariate visualizations\"\nauthor: \"Sean Conway\"\neditor: visual\ndescription: \"Univariate / bivariate visualizations\"  \ndate: \"1/8/2024\"\neditor_options: \n  chunk_output_type: console\nformat:\n  html:\n    df-print: paged\n    toc: true\n    code-fold: false\n    code-copy: true\n    code-tools: true\n    css: \".../styles.scss\"\ncategories:\n  - visualization\n  - ggplot2\n  - univariate\n  - bivariate\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = T)\nlibrary(tidyverse)\n```\n:::\n\n\n## Overview\n\nToday we're going to discuss data visualization. Specifically, we will discuss univariate & bivariate visualizations using [`ggplot2`](https://ggplot2.tidyverse.org/) , a package for data visualization based on the [Grammar of Graphics](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098).\n\nFor this demo, we'll be using `mtcars`, a dataset that comes built into `R`. We'll also do some recoding to make the dataset easier to understand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <- mtcars %>% \n  as_tibble() %>%\n  mutate(\n    vs=case_when(\n      vs==0 ~ \"v-shaped\",\n      vs==1 ~ \"straight\"\n      ),\n    am=case_when(\n      am==0 ~ \"automatic\",\n      am==1 ~ \"manual\"\n    )\n  )\n# Previewing our new columns\nmtcars %>% \n  select(am,vs)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"am\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"vs\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"straight\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"automatic\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"straight\"},{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"v-shaped\"},{\"1\":\"manual\",\"2\":\"straight\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Univariate Visualizations\n\n### Numerical variables\n\nggplot works by passing variables to aesthetics, concrete visual aspects of a plot. Let's say we want to create a histogram to examine the distribution of a numerical variable, like `mpg`, the miles per gallon of a car. A histogram works by putting numerical observations into discrete *bins* and plotting the height of each bin based on the number of observations.\n\nWe first initialize a ggplot object using the `ggplot` function, specifying the dataframe as `mtcars` and the `x` aesthetic as`mpg`. This tells ggplot that we are passing this aesthetic downstream. We initialize the histogram using the `geom_histogram()` function and \"add\" it to the plot using the `+` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(x=mpg))+\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe see that the distribution is most dense between 15 & 25`mpg`. Let's try it with a few other variables - `hp` (horsepower), `wt` (weight in tons), and `qsec` (1/4 mile time).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(hp))+ # don't need to use the x= argument, as aes automatically first argument is x aesthetic\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(wt))+\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(qsec))+\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe can also make a boxplot, using the `geom_boxplot()` function. A boxplot shows the median of a variable (center line), the first and third quartiles (ends of the box), and 1.5 x IQR (q1-q3; the \"whiskers\" at both ends).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(mpg))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mtcars,aes(hp))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n### Categorical variables\n\nNot all variables are numeric. Often we may wish to visualize the counts (or *frequencies*) of a categorical variable.\n\nWe can use the `geom_bar()` function to visualize the counts of a categorical variable such as `am` (automatic vs. manual transmission in cars).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(am))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe can even give the x axis a more informative label as well as add a title using the `labs()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(am))+\n  geom_bar()+\n  labs(x=\"transmission type\",\n       title = \"transmission frequencies\")\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Bivariate visualizations\n\nSometimes we wish to visualize two variables at once. For example, we may wish to see if cars that weigh more tend to have lower mpg, or if automatic cars are more likely to have straight-shaped engines. In these scenarios, we need *bivariate visualizations*.\n\n### Visualizing two numerical variables\n\nA common bivariate plot is a scatterplot, where we plot two numerical variables against each other, with each \"dot\" being an individual data point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x=wt,y=mpg))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt,mpg))+ # x and y are first two arguments so no need to use x= and y=\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Visualizing two categorical variables\n\nTo visualize two categorical variables, first we have to compute their counts.[^1]\n\n[^1]: We could technically let ggplot do this for us, but I always prefer to do the data analysis myself and leave the visualization to ggplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_counts <- mtcars %>%\n  group_by(vs,am) %>%\n  summarise(n=n()) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'vs'. You can override using the `.groups`\nargument.\n```\n:::\n\n```{.r .cell-code}\nmtcars_counts\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"vs\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"am\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"straight\",\"2\":\"automatic\",\"3\":\"7\"},{\"1\":\"straight\",\"2\":\"manual\",\"3\":\"7\"},{\"1\":\"v-shaped\",\"2\":\"automatic\",\"3\":\"12\"},{\"1\":\"v-shaped\",\"2\":\"manual\",\"3\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe then pass the `mtcars_counts` data frame to ggplot, and specify the following aesthetics:\n\n-   `x=vs` x axis will be engine shape\n\n-   `y=n` y axis will be frequency\n\n-   `fill=am` the fill, or coloring, of the bars will be based on whether the car has automatic or manual transmission\n\nWe use `geom_col()`, rather than `geom_bar()` , when we are manually specifying all aesthetics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars_counts,aes(x=vs,y=n,fill=am))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nBy default, `geom_col()` creates stacked bar graphs. I often find these difficult to interpret (or at worst, misleading), so I prefer to use the `position=\"dodge\"` argument to specify that the bars should be side-by-side rather than stacked.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars_counts,aes(x=vs,y=n,fill=am))+\n  geom_col(position = \"dodge\")+\n  scale_fill_discrete(name=\"transmission type\")+\n  labs(x=\"engine shape\",\n       y=\"frequency\")\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Visualizing one categorical and one numerical variable\n\nWe often care about the relationship between a categorical variable and a numerical variable. For example, is the distribution of miles-per-gallon different for automatic vs. manual tranmission?\n\nHere, we'll make boxplots. However, rather than make a single boxplot for `mpg`, we will make two side-by-side boxplots - one for manual transmission cars, and one for automatic transmission cars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars,aes(am,mpg))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](example-univariate_bivariate_vis_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nHere we can see that manual transmission cars tend to have a much higher mpg than automatic cars.\n\n## Conclusion\n\nWe'll talk much more about data visualization, including flow relationships, in the next few lectures. This just serves as an introduction to data visualization and the ggplot method of data plotting.\n",
    "supporting": [
      "example-univariate_bivariate_vis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}