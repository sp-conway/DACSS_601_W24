{
  "hash": "cde8e82e076eba6820b7509fb25dd2fc",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Sean Conway\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"12/24/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer()` or `pivot_wider()`.   \n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\".  \n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current dataset and identify how you want a new one to look.  \n\n### Example: pivoting a dataset\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1240.     982.\n2 USA      1990 NAFTA    1157.    2452.\n3 France   1980 EU        772.     770.\n4 Mexico   1990 NAFTA     880.    1865.\n5 USA      1980 NAFTA     663.     984.\n6 France   1990 EU       1588.    2207.\n```\n:::\n:::\n\nIn this example, we want the names `outgoing` and `ingoing` to be in a single column indicating the trade direction, with the values being stored in a column indicating the value of the trade.  \n\n## Pivot the Data\n\nNow we will pivot the data!   \n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf1<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1240.\n 2 Mexico   1980 NAFTA incoming               982.\n 3 USA      1990 NAFTA outgoing              1157.\n 4 USA      1990 NAFTA incoming              2452.\n 5 France   1980 EU    outgoing               772.\n 6 France   1980 EU    incoming               770.\n 7 Mexico   1990 NAFTA outgoing               880.\n 8 Mexico   1990 NAFTA incoming              1865.\n 9 USA      1980 NAFTA outgoing               663.\n10 USA      1980 NAFTA incoming               984.\n11 France   1990 EU    outgoing              1588.\n12 France   1990 EU    incoming              2207.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, it will be much easier to work with.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}